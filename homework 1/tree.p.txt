program BinarySearch(input, output);
	type tree = ^node;
	type node = record
			info : integer;
			left : tree;
			right : tree
		end;

	procedure insert(var root : tree, data : integer);
	begin
		if root = nil then
			begin
				new(root);
				root^.left = nil;
				root^.right = nil;
				root^.info = data
			end
		else if root^.info < data then
			insert(root^.right, data)
		else
			insert(root^.left, data);
	end;

	function member(var root : tree; data : integer): integer;
	begin
		if root = nil then
			member := 0
		else if root^.info == data then
			member := 1
		else if root^.info < data
			member := member(root^.right, data)
		else
			member := member(root^.left, data)
	end;

	var t : tree;
	x : integer;

begin
	t := nil;
	readln(x);

	while not x = -1 do
	begin
		insert(t, x);
		readln(x)
	end

	readln(x);

	while not x = -1 do
	begin
		if member(t, x) then
			write(true)
		else
			write(false)
		readln(x)
	end
end